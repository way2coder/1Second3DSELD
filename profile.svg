<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg --pid 24356</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="7642"><g><title>generate (cls_data_generator.py:218) (282 samples, 3.69%)</title><rect x="0.4449%" y="116" width="3.6901%" height="15" fill="rgb(227,0,7)" fg:x="34" fg:w="282"/><text x="0.6949%" y="126.50">gene..</text></g><g><title>load (numpy\lib\npyio.py:432) (281 samples, 3.68%)</title><rect x="0.4580%" y="132" width="3.6770%" height="15" fill="rgb(217,0,24)" fg:x="35" fg:w="281"/><text x="0.7080%" y="142.50">load..</text></g><g><title>read_array (numpy\lib\format.py:814) (280 samples, 3.66%)</title><rect x="0.4711%" y="148" width="3.6640%" height="15" fill="rgb(221,193,54)" fg:x="36" fg:w="280"/><text x="0.7211%" y="158.50">read..</text></g><g><title>generate (cls_data_generator.py:219) (37 samples, 0.48%)</title><rect x="4.1350%" y="116" width="0.4842%" height="15" fill="rgb(248,212,6)" fg:x="316" fg:w="37"/><text x="4.3850%" y="126.50"></text></g><g><title>load (numpy\lib\npyio.py:432) (37 samples, 0.48%)</title><rect x="4.1350%" y="132" width="0.4842%" height="15" fill="rgb(208,68,35)" fg:x="316" fg:w="37"/><text x="4.3850%" y="142.50"></text></g><g><title>read_array (numpy\lib\format.py:814) (34 samples, 0.44%)</title><rect x="4.1743%" y="148" width="0.4449%" height="15" fill="rgb(232,128,0)" fg:x="319" fg:w="34"/><text x="4.4243%" y="158.50"></text></g><g><title>generate (cls_data_generator.py:233) (9 samples, 0.12%)</title><rect x="4.6192%" y="116" width="0.1178%" height="15" fill="rgb(207,160,47)" fg:x="353" fg:w="9"/><text x="4.8692%" y="126.50"></text></g><g><title>generate (cls_data_generator.py:272) (256 samples, 3.35%)</title><rect x="4.9202%" y="116" width="3.3499%" height="15" fill="rgb(228,23,34)" fg:x="376" fg:w="256"/><text x="5.1702%" y="126.50">gen..</text></g><g><title>train_epoch (run.py:248) (667 samples, 8.73%)</title><rect x="0.0000%" y="100" width="8.7281%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="667"/><text x="0.2500%" y="110.50">train_epoch ..</text></g><g><title>generate (cls_data_generator.py:284) (29 samples, 0.38%)</title><rect x="8.3486%" y="116" width="0.3795%" height="15" fill="rgb(220,122,19)" fg:x="638" fg:w="29"/><text x="8.5986%" y="126.50"></text></g><g><title>train_epoch (run.py:253) (281 samples, 3.68%)</title><rect x="8.7281%" y="100" width="3.6770%" height="15" fill="rgb(250,228,42)" fg:x="667" fg:w="281"/><text x="8.9781%" y="110.50">trai..</text></g><g><title>_wrapped_call_impl (torch\nn\modules\module.py:1518) (14 samples, 0.18%)</title><rect x="12.6407%" y="212" width="0.1832%" height="15" fill="rgb(240,193,28)" fg:x="966" fg:w="14"/><text x="12.8907%" y="222.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1527) (14 samples, 0.18%)</title><rect x="12.6407%" y="228" width="0.1832%" height="15" fill="rgb(216,20,37)" fg:x="966" fg:w="14"/><text x="12.8907%" y="238.50"></text></g><g><title>forward (models\seldnet_model.py:20) (24 samples, 0.31%)</title><rect x="12.6276%" y="196" width="0.3141%" height="15" fill="rgb(206,188,39)" fg:x="965" fg:w="24"/><text x="12.8776%" y="206.50"></text></g><g><title>relu (torch\nn\functional.py:1471) (9 samples, 0.12%)</title><rect x="12.8239%" y="212" width="0.1178%" height="15" fill="rgb(217,207,13)" fg:x="980" fg:w="9"/><text x="13.0739%" y="222.50"></text></g><g><title>format_stack (torch\fx\traceback.py:68) (8 samples, 0.10%)</title><rect x="12.8370%" y="228" width="0.1047%" height="15" fill="rgb(231,73,38)" fg:x="981" fg:w="8"/><text x="13.0870%" y="238.50"></text></g><g><title>forward (models\seldnet_model.py:73) (37 samples, 0.48%)</title><rect x="12.6145%" y="148" width="0.4842%" height="15" fill="rgb(225,20,46)" fg:x="964" fg:w="37"/><text x="12.8645%" y="158.50"></text></g><g><title>_wrapped_call_impl (torch\nn\modules\module.py:1518) (36 samples, 0.47%)</title><rect x="12.6276%" y="164" width="0.4711%" height="15" fill="rgb(210,31,41)" fg:x="965" fg:w="36"/><text x="12.8776%" y="174.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1527) (36 samples, 0.47%)</title><rect x="12.6276%" y="180" width="0.4711%" height="15" fill="rgb(221,200,47)" fg:x="965" fg:w="36"/><text x="12.8776%" y="190.50"></text></g><g><title>_in_projection_packed (torch\nn\functional.py:4824) (11 samples, 0.14%)</title><rect x="13.3211%" y="228" width="0.1439%" height="15" fill="rgb(226,26,5)" fg:x="1018" fg:w="11"/><text x="13.5711%" y="238.50"></text></g><g><title>format_stack (torch\fx\traceback.py:68) (10 samples, 0.13%)</title><rect x="13.3342%" y="244" width="0.1309%" height="15" fill="rgb(249,33,26)" fg:x="1019" fg:w="10"/><text x="13.5842%" y="254.50"></text></g><g><title>format_stack (torch\fx\traceback.py:68) (9 samples, 0.12%)</title><rect x="13.4651%" y="244" width="0.1178%" height="15" fill="rgb(235,183,28)" fg:x="1029" fg:w="9"/><text x="13.7151%" y="254.50"></text></g><g><title>_in_projection_packed (torch\nn\functional.py:4826) (11 samples, 0.14%)</title><rect x="13.4651%" y="228" width="0.1439%" height="15" fill="rgb(221,5,38)" fg:x="1029" fg:w="11"/><text x="13.7151%" y="238.50"></text></g><g><title>extract (traceback.py:379) (9 samples, 0.12%)</title><rect x="13.6221%" y="276" width="0.1178%" height="15" fill="rgb(247,18,42)" fg:x="1041" fg:w="9"/><text x="13.8721%" y="286.50"></text></g><g><title>checkcache (linecache.py:72) (9 samples, 0.12%)</title><rect x="13.6221%" y="292" width="0.1178%" height="15" fill="rgb(241,131,45)" fg:x="1041" fg:w="9"/><text x="13.8721%" y="302.50"></text></g><g><title>extract_stack (traceback.py:227) (10 samples, 0.13%)</title><rect x="13.6221%" y="260" width="0.1309%" height="15" fill="rgb(249,31,29)" fg:x="1041" fg:w="10"/><text x="13.8721%" y="270.50"></text></g><g><title>multi_head_attention_forward (torch\nn\functional.py:5300) (37 samples, 0.48%)</title><rect x="13.3211%" y="212" width="0.4842%" height="15" fill="rgb(225,111,53)" fg:x="1018" fg:w="37"/><text x="13.5711%" y="222.50"></text></g><g><title>_in_projection_packed (torch\nn\functional.py:4827) (15 samples, 0.20%)</title><rect x="13.6090%" y="228" width="0.1963%" height="15" fill="rgb(238,160,17)" fg:x="1040" fg:w="15"/><text x="13.8590%" y="238.50"></text></g><g><title>format_stack (torch\fx\traceback.py:68) (14 samples, 0.18%)</title><rect x="13.6221%" y="244" width="0.1832%" height="15" fill="rgb(214,148,48)" fg:x="1041" fg:w="14"/><text x="13.8721%" y="254.50"></text></g><g><title>multi_head_attention_forward (torch\nn\functional.py:5355) (8 samples, 0.10%)</title><rect x="13.9492%" y="212" width="0.1047%" height="15" fill="rgb(232,36,49)" fg:x="1066" fg:w="8"/><text x="14.1992%" y="222.50"></text></g><g><title>extract_stack (traceback.py:227) (8 samples, 0.10%)</title><rect x="14.0932%" y="244" width="0.1047%" height="15" fill="rgb(209,103,24)" fg:x="1077" fg:w="8"/><text x="14.3432%" y="254.50"></text></g><g><title>multi_head_attention_forward (torch\nn\functional.py:5405) (9 samples, 0.12%)</title><rect x="14.0932%" y="212" width="0.1178%" height="15" fill="rgb(229,88,8)" fg:x="1077" fg:w="9"/><text x="14.3432%" y="222.50"></text></g><g><title>format_stack (torch\fx\traceback.py:68) (9 samples, 0.12%)</title><rect x="14.0932%" y="228" width="0.1178%" height="15" fill="rgb(213,181,19)" fg:x="1077" fg:w="9"/><text x="14.3432%" y="238.50"></text></g><g><title>multi_head_attention_forward (torch\nn\functional.py:5412) (13 samples, 0.17%)</title><rect x="14.3418%" y="212" width="0.1701%" height="15" fill="rgb(254,191,54)" fg:x="1096" fg:w="13"/><text x="14.5918%" y="222.50"></text></g><g><title>format_stack (torch\fx\traceback.py:68) (12 samples, 0.16%)</title><rect x="14.3549%" y="228" width="0.1570%" height="15" fill="rgb(241,83,37)" fg:x="1097" fg:w="12"/><text x="14.6049%" y="238.50"></text></g><g><title>extract_stack (traceback.py:227) (11 samples, 0.14%)</title><rect x="14.3680%" y="244" width="0.1439%" height="15" fill="rgb(233,36,39)" fg:x="1098" fg:w="11"/><text x="14.6180%" y="254.50"></text></g><g><title>extract (traceback.py:379) (10 samples, 0.13%)</title><rect x="14.3811%" y="260" width="0.1309%" height="15" fill="rgb(226,3,54)" fg:x="1099" fg:w="10"/><text x="14.6311%" y="270.50"></text></g><g><title>checkcache (linecache.py:72) (10 samples, 0.13%)</title><rect x="14.3811%" y="276" width="0.1309%" height="15" fill="rgb(245,192,40)" fg:x="1099" fg:w="10"/><text x="14.6311%" y="286.50"></text></g><g><title>forward (torch\nn\modules\activation.py:1241) (106 samples, 1.39%)</title><rect x="13.3211%" y="196" width="1.3871%" height="15" fill="rgb(238,167,29)" fg:x="1018" fg:w="106"/><text x="13.5711%" y="206.50"></text></g><g><title>forward (models\seldnet_model.py:83) (112 samples, 1.47%)</title><rect x="13.3080%" y="148" width="1.4656%" height="15" fill="rgb(232,182,51)" fg:x="1017" fg:w="112"/><text x="13.5580%" y="158.50"></text></g><g><title>_wrapped_call_impl (torch\nn\modules\module.py:1518) (112 samples, 1.47%)</title><rect x="13.3080%" y="164" width="1.4656%" height="15" fill="rgb(231,60,39)" fg:x="1017" fg:w="112"/><text x="13.5580%" y="174.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1527) (112 samples, 1.47%)</title><rect x="13.3080%" y="180" width="1.4656%" height="15" fill="rgb(208,69,12)" fg:x="1017" fg:w="112"/><text x="13.5580%" y="190.50"></text></g><g><title>extract_stack (traceback.py:227) (8 samples, 0.10%)</title><rect x="15.0484%" y="180" width="0.1047%" height="15" fill="rgb(235,93,37)" fg:x="1150" fg:w="8"/><text x="15.2984%" y="190.50"></text></g><g><title>extract (traceback.py:379) (8 samples, 0.10%)</title><rect x="15.0484%" y="196" width="0.1047%" height="15" fill="rgb(213,116,39)" fg:x="1150" fg:w="8"/><text x="15.2984%" y="206.50"></text></g><g><title>train_epoch (run.py:255) (206 samples, 2.70%)</title><rect x="12.4706%" y="100" width="2.6956%" height="15" fill="rgb(222,207,29)" fg:x="953" fg:w="206"/><text x="12.7206%" y="110.50">tr..</text></g><g><title>_wrapped_call_impl (torch\nn\modules\module.py:1518) (206 samples, 2.70%)</title><rect x="12.4706%" y="116" width="2.6956%" height="15" fill="rgb(206,96,30)" fg:x="953" fg:w="206"/><text x="12.7206%" y="126.50">_w..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1527) (206 samples, 2.70%)</title><rect x="12.4706%" y="132" width="2.6956%" height="15" fill="rgb(218,138,4)" fg:x="953" fg:w="206"/><text x="12.7206%" y="142.50">_c..</text></g><g><title>forward (models\seldnet_model.py:99) (10 samples, 0.13%)</title><rect x="15.0353%" y="148" width="0.1309%" height="15" fill="rgb(250,191,14)" fg:x="1149" fg:w="10"/><text x="15.2853%" y="158.50"></text></g><g><title>format_stack (torch\fx\traceback.py:68) (9 samples, 0.12%)</title><rect x="15.0484%" y="164" width="0.1178%" height="15" fill="rgb(239,60,40)" fg:x="1150" fg:w="9"/><text x="15.2984%" y="174.50"></text></g><g><title>extract_stack (traceback.py:227) (10 samples, 0.13%)</title><rect x="15.8990%" y="148" width="0.1309%" height="15" fill="rgb(206,27,48)" fg:x="1215" fg:w="10"/><text x="16.1490%" y="158.50"></text></g><g><title>__call__ (criterions.py:86) (16 samples, 0.21%)</title><rect x="15.8336%" y="116" width="0.2094%" height="15" fill="rgb(225,35,8)" fg:x="1210" fg:w="16"/><text x="16.0836%" y="126.50"></text></g><g><title>format_stack (torch\fx\traceback.py:68) (11 samples, 0.14%)</title><rect x="15.8990%" y="132" width="0.1439%" height="15" fill="rgb(250,213,24)" fg:x="1215" fg:w="11"/><text x="16.1490%" y="142.50"></text></g><g><title>train_epoch (run.py:263) (84 samples, 1.10%)</title><rect x="15.1662%" y="100" width="1.0992%" height="15" fill="rgb(247,123,22)" fg:x="1159" fg:w="84"/><text x="15.4162%" y="110.50"></text></g><g><title>train_epoch (run.py:265) (11 samples, 0.14%)</title><rect x="16.2785%" y="100" width="0.1439%" height="15" fill="rgb(231,138,38)" fg:x="1244" fg:w="11"/><text x="16.5285%" y="110.50"></text></g><g><title>wrapper (torch\optim\optimizer.py:373) (11 samples, 0.14%)</title><rect x="16.2785%" y="116" width="0.1439%" height="15" fill="rgb(231,145,46)" fg:x="1244" fg:w="11"/><text x="16.5285%" y="126.50"></text></g><g><title>_use_grad (torch\optim\optimizer.py:76) (11 samples, 0.14%)</title><rect x="16.2785%" y="132" width="0.1439%" height="15" fill="rgb(251,118,11)" fg:x="1244" fg:w="11"/><text x="16.5285%" y="142.50"></text></g><g><title>step (torch\optim\adam.py:163) (10 samples, 0.13%)</title><rect x="16.2915%" y="148" width="0.1309%" height="15" fill="rgb(217,147,25)" fg:x="1245" fg:w="10"/><text x="16.5415%" y="158.50"></text></g><g><title>adam (torch\optim\adam.py:311) (8 samples, 0.10%)</title><rect x="16.3177%" y="164" width="0.1047%" height="15" fill="rgb(247,81,37)" fg:x="1247" fg:w="8"/><text x="16.5677%" y="174.50"></text></g><g><title>main (run.py:488) (1,257 samples, 16.45%)</title><rect x="0.0000%" y="84" width="16.4486%" height="15" fill="rgb(209,12,38)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="94.50">main (run.py:488)</text></g><g><title>generate (cls_data_generator.py:218) (352 samples, 4.61%)</title><rect x="18.4899%" y="116" width="4.6061%" height="15" fill="rgb(227,1,9)" fg:x="1413" fg:w="352"/><text x="18.7399%" y="126.50">gener..</text></g><g><title>load (numpy\lib\npyio.py:432) (349 samples, 4.57%)</title><rect x="18.5292%" y="132" width="4.5669%" height="15" fill="rgb(248,47,43)" fg:x="1416" fg:w="349"/><text x="18.7792%" y="142.50">load ..</text></g><g><title>read_array (numpy\lib\format.py:814) (344 samples, 4.50%)</title><rect x="18.5946%" y="148" width="4.5014%" height="15" fill="rgb(221,10,30)" fg:x="1421" fg:w="344"/><text x="18.8446%" y="158.50">read_..</text></g><g><title>read_array (numpy\lib\format.py:814) (46 samples, 0.60%)</title><rect x="23.7896%" y="148" width="0.6019%" height="15" fill="rgb(210,229,1)" fg:x="1818" fg:w="46"/><text x="24.0396%" y="158.50"></text></g><g><title>generate (cls_data_generator.py:219) (100 samples, 1.31%)</title><rect x="23.0960%" y="116" width="1.3086%" height="15" fill="rgb(222,148,37)" fg:x="1765" fg:w="100"/><text x="23.3460%" y="126.50"></text></g><g><title>load (numpy\lib\npyio.py:432) (53 samples, 0.69%)</title><rect x="23.7111%" y="132" width="0.6935%" height="15" fill="rgb(234,67,33)" fg:x="1812" fg:w="53"/><text x="23.9611%" y="142.50"></text></g><g><title>generate (cls_data_generator.py:233) (16 samples, 0.21%)</title><rect x="24.4439%" y="116" width="0.2094%" height="15" fill="rgb(247,98,35)" fg:x="1868" fg:w="16"/><text x="24.6939%" y="126.50"></text></g><g><title>generate (cls_data_generator.py:245) (966 samples, 12.64%)</title><rect x="24.7187%" y="116" width="12.6407%" height="15" fill="rgb(247,138,52)" fg:x="1889" fg:w="966"/><text x="24.9687%" y="126.50">generate (cls_data_..</text></g><g><title>ones (numpy\core\numeric.py:206) (279 samples, 3.65%)</title><rect x="33.7085%" y="132" width="3.6509%" height="15" fill="rgb(213,79,30)" fg:x="2576" fg:w="279"/><text x="33.9585%" y="142.50">ones..</text></g><g><title>copyto (&lt;__array_function__ internals&gt;:200) (279 samples, 3.65%)</title><rect x="33.7085%" y="148" width="3.6509%" height="15" fill="rgb(246,177,23)" fg:x="2576" fg:w="279"/><text x="33.9585%" y="158.50">copy..</text></g><g><title>generate (cls_data_generator.py:247) (151 samples, 1.98%)</title><rect x="37.3593%" y="116" width="1.9759%" height="15" fill="rgb(230,62,27)" fg:x="2855" fg:w="151"/><text x="37.6093%" y="126.50">g..</text></g><g><title>generate (cls_data_generator.py:254) (8 samples, 0.10%)</title><rect x="39.3353%" y="116" width="0.1047%" height="15" fill="rgb(216,154,8)" fg:x="3006" fg:w="8"/><text x="39.5853%" y="126.50"></text></g><g><title>generate (cls_data_generator.py:259) (31 samples, 0.41%)</title><rect x="39.4399%" y="116" width="0.4057%" height="15" fill="rgb(244,35,45)" fg:x="3014" fg:w="31"/><text x="39.6899%" y="126.50"></text></g><g><title>generate (cls_data_generator.py:260) (18 samples, 0.24%)</title><rect x="39.8456%" y="116" width="0.2355%" height="15" fill="rgb(251,115,12)" fg:x="3045" fg:w="18"/><text x="40.0956%" y="126.50"></text></g><g><title>generate (cls_data_generator.py:271) (13 samples, 0.17%)</title><rect x="40.1858%" y="116" width="0.1701%" height="15" fill="rgb(240,54,50)" fg:x="3071" fg:w="13"/><text x="40.4358%" y="126.50"></text></g><g><title>generate (cls_data_generator.py:272) (923 samples, 12.08%)</title><rect x="40.3559%" y="116" width="12.0780%" height="15" fill="rgb(233,84,52)" fg:x="3084" fg:w="923"/><text x="40.6059%" y="126.50">generate (cls_data..</text></g><g><title>validation_epoch (run.py:122) (2,920 samples, 38.21%)</title><rect x="16.4878%" y="100" width="38.2099%" height="15" fill="rgb(207,117,47)" fg:x="1260" fg:w="2920"/><text x="16.7378%" y="110.50">validation_epoch (run.py:122)</text></g><g><title>generate (cls_data_generator.py:284) (166 samples, 2.17%)</title><rect x="52.5255%" y="116" width="2.1722%" height="15" fill="rgb(249,43,39)" fg:x="4014" fg:w="166"/><text x="52.7755%" y="126.50">g..</text></g><g><title>validation_epoch (run.py:125) (1,178 samples, 15.41%)</title><rect x="54.6977%" y="100" width="15.4148%" height="15" fill="rgb(209,38,44)" fg:x="4180" fg:w="1178"/><text x="54.9477%" y="110.50">validation_epoch (run.py..</text></g><g><title>forward (models\seldnet_model.py:20) (8 samples, 0.10%)</title><rect x="70.1780%" y="196" width="0.1047%" height="15" fill="rgb(236,212,23)" fg:x="5363" fg:w="8"/><text x="70.4280%" y="206.50"></text></g><g><title>_wrapped_call_impl (torch\nn\modules\module.py:1518) (8 samples, 0.10%)</title><rect x="70.1780%" y="212" width="0.1047%" height="15" fill="rgb(242,79,21)" fg:x="5363" fg:w="8"/><text x="70.4280%" y="222.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1527) (8 samples, 0.10%)</title><rect x="70.1780%" y="228" width="0.1047%" height="15" fill="rgb(211,96,35)" fg:x="5363" fg:w="8"/><text x="70.4280%" y="238.50"></text></g><g><title>forward (models\seldnet_model.py:73) (12 samples, 0.16%)</title><rect x="70.1387%" y="148" width="0.1570%" height="15" fill="rgb(253,215,40)" fg:x="5360" fg:w="12"/><text x="70.3887%" y="158.50"></text></g><g><title>_wrapped_call_impl (torch\nn\modules\module.py:1518) (11 samples, 0.14%)</title><rect x="70.1518%" y="164" width="0.1439%" height="15" fill="rgb(211,81,21)" fg:x="5361" fg:w="11"/><text x="70.4018%" y="174.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1527) (9 samples, 0.12%)</title><rect x="70.1780%" y="180" width="0.1178%" height="15" fill="rgb(208,190,38)" fg:x="5363" fg:w="9"/><text x="70.4280%" y="190.50"></text></g><g><title>validation_epoch (run.py:126) (23 samples, 0.30%)</title><rect x="70.1125%" y="100" width="0.3010%" height="15" fill="rgb(235,213,38)" fg:x="5358" fg:w="23"/><text x="70.3625%" y="110.50"></text></g><g><title>_wrapped_call_impl (torch\nn\modules\module.py:1518) (23 samples, 0.30%)</title><rect x="70.1125%" y="116" width="0.3010%" height="15" fill="rgb(237,122,38)" fg:x="5358" fg:w="23"/><text x="70.3625%" y="126.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1527) (23 samples, 0.30%)</title><rect x="70.1125%" y="132" width="0.3010%" height="15" fill="rgb(244,218,35)" fg:x="5358" fg:w="23"/><text x="70.3625%" y="142.50"></text></g><g><title>validation_epoch (run.py:135) (21 samples, 0.27%)</title><rect x="70.4135%" y="100" width="0.2748%" height="15" fill="rgb(240,68,47)" fg:x="5381" fg:w="21"/><text x="70.6635%" y="110.50"></text></g><g><title>all (7,642 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="7642"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (run.py:601) (7,642 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="7642"/><text x="0.2500%" y="78.50">&lt;module&gt; (run.py:601)</text></g><g><title>main (run.py:495) (6,385 samples, 83.55%)</title><rect x="16.4486%" y="84" width="83.5514%" height="15" fill="rgb(224,169,11)" fg:x="1257" fg:w="6385"/><text x="16.6986%" y="94.50">main (run.py:495)</text></g><g><title>validation_epoch (run.py:238) (2,240 samples, 29.31%)</title><rect x="70.6883%" y="100" width="29.3117%" height="15" fill="rgb(250,166,2)" fg:x="5402" fg:w="2240"/><text x="70.9383%" y="110.50">validation_epoch (run.py:238)</text></g></svg></svg>